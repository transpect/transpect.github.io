<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book xmlns="http://docbook.org/ns/docbook" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  version="5.0">
  <info>
    <title>transpect.github.io</title>
    <!-- 
      part      ...   left nav-bar entry
      chapter   ...   left nav-bar subentry (only multiple chapters become subentries)
      section   ...   right table of contents
      appendix  ...   becomes footer?
    -->
  </info>
  <part>
    <title>About</title>
    <chapter xml:base="../index.html">
      <title>transpect</title>
      <subtitle>An Open Source framework for converting and checking data</subtitle>
      <para role="col">Transpect was designed to provide generic and stable modules for common conversion and checking
        tasks. To adress complex and diverse data, transpect offers a cascading configuration to override specific
        transformation and checking rules. Each component within the framework is Open Source and use standard
        technologies such as XSLT 2.0 and XProc.</para>
      <section>
        <title>Data Conversion</title>
        <para>Transpect offers many modules to parse and convert a wide range of XML-based formats such as DOCX, IDML,
          EPUB, NLM JATS/BITS and TEI. Additionally, there exist tools for converting text-based formats such as CSS and
          LaTeX as well as extensions, e. g., in order to check PDF and image files. The following list of supported
          formats makes no claim to be comprehensive.</para>
        <informaltable>
          <thead>
            <tr>
              <td>Format</td>
              <td>Parse</td>
              <td>Generate</td>
              <td>Remark</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>EPUB 2/3</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>including Landmarks, Fixed Layout, Media Overlays, Structural Semantics Vocabulary</td>
            </tr>
            <tr>
              <td>HTML, CSS</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>including conversion from CSS to <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link></td>
            </tr>
            <tr>
              <td>Images</td>
              <td>&#x2713;</td>
              <td>–</td>
              <td>extract technical metadata, conversion is possible with 3rd-party software</td>
            </tr>
            <tr>
              <td>InDesign Markup Language (IDML)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>Styles are retained as <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link>. Generation is limited to one main story yet.</td>
            </tr>
            <tr>
              <td>Math (MathML, OMML, LaTeX)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>Conversion from MathType, OMML to MathML and LaTeX.</td>
            </tr>
            <tr>
              <td>Office Open XML, OpenDocument (ODT)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>Styles are retained as <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link>. Some OOXML are not supported yet but are retained (SmartArts,
                Drawings)</td>
            </tr>
            <tr>
              <td>XML formats, e.g. DocBook, NLM JATS/BITS/HoBots, TEI</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
            </tr>
            <tr>
              <td>PDF</td>
              <td>–</td>
              <td>&#x2713;</td>
              <td>parsing is possible with 3rd-party extensions but limited due to the nature of the format</td>
            </tr>
          </tbody>
        </informaltable>
        <para>Many converters generate the intermediate format <link xlink:href="https://github.com/le-tex/Hub">Hub XML</link>. Hub XML is a DocBook 5.1 derivative that allows
          for documents that lack a proper section hierarchy and uses <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link> for expressing layout information. It is used
          as a common intermediate format to represent raw conversion results of, for example, OOXML, ODT, and IDML
          documents.</para>
      </section>
      <section>
        <title>Checking Data</title>
        <para>Transpect implements Schematron and Schema validation. Furthermore, many modules integrate error detection
          and recovery methods. Reports are stored as Schematron SVRL document. The report messages can be displayed in
          an HTML view of the document at the error location. </para>
      </section>
      <section>
        <title>Configuration Cascade</title>
        <para>Default transformation and checking rules (XSLT, Schematron, CSS, …) may be superseded with specific
          rules. These rules specified according to the group of content that the input belongs to, for example per
          company, per production-line, or per product.</para>
      </section>
      <section>
        <title>Open Source</title>
        <para>Transpect is published under the BSD 2-clause license, also known as FreeBSD License. This permissive
          license imposes minimal restrictions on the redistribution of the software. Therefore you can use the software
          in commercial and even in closed source projects.</para>
        <para> The license terms can be found here: <link xlink:href="http://opensource.org/licenses/BSD-2-Clause"
            >http://opensource.org/licenses/BSD-2-Clause</link>
        </para>
      </section>
      <section>
        <title>Industry Standards</title>
        <para>The technologies behind transpect are industry standards like XProc, XSLT 2.0 and Schematron. Their
          specifications are publicly available through international standards organizations such as W3C and
          ISO.</para>
        <informaltable>
          <tbody>
            <tr>
              <th>XProc</th>
              <td>A language to specify a sequence of operations to be performed on XML documents.</td>
            </tr>
            <tr>
              <th>XSLT 2.0</th>
              <td>XSLT is a programming language for the purpose of transforming XML documents. Due to several
                limitations of version 1.0, we recommend to use XSLT 2.0</td>
            </tr>
            <tr>
              <th>Schematron</th>
              <td>A rule-based schema language to validate XML documents.</td>
            </tr>
            <tr>
              <th>RelaxNG</th>
              <td>RelaxNG is an XML schema language to specify patterns for the structure of an XML document.</td>
            </tr>
          </tbody>
        </informaltable>
      </section>
      <section>
        <title>le-tex</title>
        <para>Transpect is developed and maintained by le-tex, a Leipzig-based company which provides professional
          services for publishers.</para>
      </section>
    </chapter>
  </part>
  <part>
    <title>Getting Started</title>
    <chapter xml:base="../getting-started.html">
      <title>Getting Started</title>
      <subtitle>Learn how to use transpect</subtitle>
      <section xml:id="gs-prerequisites">
        <title>Prerequisites</title>
        <para>There are no further prerequisites as are required to run XProc. If you are not familiar with XProc, we
          suggest to work yourself through Roger L. Costello’s <link xlink:href="http://www.xfront.com/xproc/">XProc
            tutorial</link> first.</para>
        <simplesect role="col s12 m6">
          <title>XML Calabash</title>
          <para>We recommend to use our pre-configured XML Calabash for running transpect’s XProc pipelines. It includes
            convenient frontend scripts and extensions steps which are essential to some modules.</para>
        </simplesect>
        <simplesect role="col s12 m6">
          <title>Java</title>
          <para>XML Calabash needs Java 1.7 and later to run. We noticed some odd behaviour while running XML Calabash
            with a JVMs other than Oracle. If you get memory issues, consider to install the 64-bit version.</para>
        </simplesect>
      </section>
      <section  xml:id="gs-project-setup">
        <title>Project Setup</title>
        <bridgehead>Install XML Calabash</bridgehead>
        <para>We recommend to use Git or SVN to checkout Calabash to take care that all dependencies are met. The calabash directory
          should be placed at the top-level of your project directory.</para>
        <programlisting><code>MyProject/
  |--calabash/
  |  |--calabash.sh
  |  |--calabash.bat</code></programlisting>
        <programlisting><code role="language-git">git clone --recursive https://github.com/transpect/calabash-frontend calabash</code></programlisting>
        <note>
          <title>Optional: checkout XML Calabash with SVN</title>
          <para>The SVN client of GitHub doesn't support SVN externals, so we have to get each module separately.</para>
          <programlisting><code role="language-svn">svn co https://github.com/transpect/calabash-frontend/trunk calabash
svn co https://github.com/transpect/calabash-distro/trunk calabash/distro</code></programlisting>
          <para>Some transpect modules depend on certain XML Calabash extensions, so you may want to get them, too.</para>
          <programlisting><code role="language-svn">svn co https://github.com/transpect/unzip-extension/trunk calabash/extensions/transpect/unzip-extension
svn co https://github.com/transpect/rng-extension/trunk calabash/extensions/transpect/rng-extension
svn co https://github.com/transpect/image-props-extension/trunk calabash/extensions/transpect/image-props-extension
svn co https://github.com/transpect/image-transform-extension/trunk calabash/extensions/transpect/image-transform-extension</code></programlisting>
        </note>
        <bridgehead>Checkout the transpect modules</bridgehead>
        <para>First, we have to checkout the modules with Git or SVN. For example, we want to get <xref linkend="docx2hub-convert"/>, 
          which converts Microsoft Word to <link xlink:href="https://github.com/le-tex/Hub">Hub XML</link>. The docx2hub module depends on <xref linkend="modules-xproc-util"/> and <xref linkend="modules-xslt-util"/>.
        </para>
        <programlisting><code role="language-git">git clone https://github.com/transpect/docx2hub
git clone https://github.com/transpect/htmlreports
git clone https://github.com/transpect/xslt-util
git clone https://github.com/transpect/xproc-util</code></programlisting>
        <note>
          <title>Optional: checkout modules with SVN</title>
          <programlisting><code role="language-git">svn co https://github.com/transpect/docx2hub/trunk docx2hub
svn co https://github.com/transpect/htmlreports/trunk htmlreports          
svn co https://github.com/transpect/xslt-util/trunk xslt-util
svn co https://github.com/transpect/xproc-util/trunk xproc-util</code></programlisting>
        </note>
        <para>After we cloned XML Calabash and the transpect modules, our project directory should look like this.</para>
<programlisting><code>MyProject/
  |--calabash/
  |--docx2hub/
  |--htmlreports/
  |--xproc-util/
  |--xslt-util/</code></programlisting>
        <bridgehead>Create an XML Catalog</bridgehead>
        <para>Transpect uses canonical import URIs to import other modules. To resolve this URIs, our XML Calabash
          looks after an XML catalog in the project directory. Starting from the project dir, the path is usually <filename>xmlcatalog/catalog.xml</filename>. 
          So you have to create the directory <filename>xmlcatalog</filename> and create a file named <filename>catalog.xml</filename> in this directory.</para>
        <programlisting><code>MyProject/
  |--xmlcatalog/
  |  |--catalog.xml</code></programlisting>
        <para>The XML catalog of the project is used to include the catalogs of the transpect modules. Therefore the <code>nextCatalog</code> element is used 
        to connect the module catalogs. Edit the <filename>catalog.xml</filename> and add the following lines.</para>
        <programlisting><code role="language-markup">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
  &lt;nextCatalog catalog="../docx2hub/xmlcatalog/catalog.xml"/>
  &lt;nextCatalog catalog="../htmlreports/xmlcatalog/catalog.xml"/>
  &lt;nextCatalog catalog="../xproc-util/xmlcatalog/catalog.xml"/>
  &lt;nextCatalog catalog="../xslt-util/xmlcatalog/catalog.xml"/>
&lt;/catalog></code></programlisting>
      </section>
      <section xml:id="gs-run-the-pipeline">
        <title>Run the pipeline</title>
        <bridgehead>Command line</bridgehead>
        <para>After we are included transpect in our project, we can run the <xref linkend="docx2hub-convert"/> pipeline to convert a Microsoft 
          Word DOCX file to <link xlink:href="https://github.com/le-tex/Hub">Hub XML</link>. Users of Linux, Mac OS X or Cygwin can use 
          a convenient Bash script:</para>
        <programlisting>./calabash/calabash.sh -o result=MyXMLfile.xml docx2hub/xpl/docx2hub.xpl docx=MyWordfile.docx</programlisting>
        <para>There exists also a Batch file for Windows users:</para>
        <programlisting>.\calabash\calabash.bat -o result=MyXMLfile.xml .\docx2hub\xpl\docx2hub.xpl docx=MyWordfile.docx</programlisting>
        <bridgehead xml:id="gs-include-in-your-pipeline">Include in your pipeline</bridgehead>
        <para>You can import and use transpect modules in your own XProc pipelines. Therefore, you need to declare the namespace and 
          add the <code>p:import</code> statement of the XProc step you want to use. Here is a simple XProc pipeline which implements 
          <xref linkend="docx2hub-convert"/>.
        </para>
        <programlisting><code role="language-markup">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" 
  xmlns:docx2hub="http://transpect.io/docx2hub"
  version="1.0">
  
  &lt;p:output port="result"/>
  
  &lt;p:option name="docx"/>
  
  &lt;p:import href="http://transpect.io/docx2hub/xpl/docx2hub.xpl"/>
  
  &lt;docx2hub:convert name="docx2hub">
    &lt;p:with-option name="docx" select="$docx"/>
  &lt;/docx2hub:convert>
  
&lt;/p:declare-step></code></programlisting>  
      </section>
      <section xml:id="gs-learn-more">
        <title>Learn more?</title>
        <para>If you want to get a deeper insight into the transpect framework, we would recommend to read our <xref linkend="tutorial-docx-jats-epub"/>.</para>          
      </section>
    </chapter>
  </part>
  <!--  *
        * insert modules, auto-generate via xpl/sync-with-github.xpl or just excecute xpl/build.xpl
        * -->
  <xi:include  href="modules.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <part>
    <title>Styleguide</title>
    <chapter xml:base="../styleguide.html">
      <title>Styleguide</title>
      <subtitle>Guidelines for writing XProc, XSLT, XPath…</subtitle>
      <section>
        <title>General</title>
        <itemizedlist>
          <listitem>
            <para>Use <code>UTF-8</code> encoding</para>
          </listitem>
          <listitem>
            <para>Use soft-tabs with a two space indent</para>
          </listitem>
          <listitem>
            <para>Keep lines shorter than 128 characters</para>
          </listitem>
          <listitem>
            <para>Use spaces around operators, after commas, colons and semicolons</para>
          </listitem>
          <listitem>
            <para>Leave a blank newline at the end of each file</para>
          </listitem>
          <listitem>
            <para>Comment your code extensively and use always speaking variable names. </para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Repository</title>
        <section>
          <title>SVN Externals&#x2009;/&#x2009;Git Submodules</title>
          <itemizedlist>
            <listitem>
              <para>Always include SVN externals or Git submodules at the root of your repository.</para>
            </listitem>
            <listitem>
              <para>Use SVN externals or Git submodules only in your frontend project and not in libraries.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>XML Catalogs</title>
          <itemizedlist>
            <listitem>
              <para>Include an XML catalog to your repository. The path of your catalog should be
                  <filename>xmlcatalog/catalog.xml</filename></para>
            </listitem>
            <listitem>
              <para>The catalog file must include a <code>rewriteURI</code> statement which identifies the repository
                with a URI.</para>
              <programlisting><code role="language-markup">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"&gt;
  
  &lt;rewriteURI uriStartString="http://transpect.io/docx2hub/" 
              rewritePrefix="../"&gt;
  
&lt;/catalog&gt;</code></programlisting>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Paths</title>
          <para>The code should be stored separated by code language. The directory name identifies the typical file
            extension of the code file. Always use common file extensions, such as <filename>xpl</filename> for XProc
            pipelines and <filename>xsl</filename> for XSLT Stylesheets.</para>
          <programlisting>
myproject/
  |--css
  |  |--stylesheet.css
  |--xmlcatalog/
  |  |--catalog.xml
  |--xpl
  |  |--myproject.xpl
  |--xsl
  |  |--myproject.xsl
</programlisting>
        </section>
      </section>
      <section>
        <title>XProc</title>
        <itemizedlist>
          <listitem>
            <para>Encapsulate commonly used functionality into components with <code>p:import</code> and
                <code>p:declare-step</code>. Add <code>name</code> and <code>type</code> attributes to each
                <code>p:declare-step</code> to make it accessible from inside and outside of the pipeline</para>
          </listitem>
          <listitem>
            <para>Avoid too many nested <code>p:choose</code> if possible. A proper XSLT is many times a better option
              to encapsulate application logic.</para>
          </listitem>
          <listitem>
            <para>Use <code>p:documentation</code> tags to explain what your pipeline does.</para>
          </listitem>
          <listitem>
            <para>Provide debugging features and console output in your pipeline, e.g. via <code>tr:store-debug</code>
              or <code>cx:message</code></para>
          </listitem>
          <listitem>
            <para>We encourage you to use the <code>cx:depends-on</code> attribute for declaring step order explicitely.
              This is needed when you want to use steps which operate with files.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>XSLT</title>
        <itemizedlist>
          <listitem>
            <para>Avoid too many nested <code>xsl:choose</code> as this will make your code difficult to decipher. Try
              to replace with <code>xsl:template</code> with concrete matching patterns.</para>
          </listitem>
          <listitem>
            <para>Provide a data type for variables via <code>as</code> attribute.</para>
            <programlisting><code role="language-markup">&lt;xsl:variable name="chapter" select="chapter" as="element(chapter)"/&gt;</code></programlisting>
          </listitem>
          <listitem>
            <para>Avoid to call named templates which call named templates and so on. If applicable use functions
              instead.</para>
          </listitem>
          <listitem>
            <para>Use XSLT modes only if technically required and not to separate your code logically. Be careful when
              using XSLT modes accompanied with identity templates as this will cost memory and reduce overall execution
              speed</para>
          </listitem>
          <listitem>
            <para>Use namespace <code>http://transpect.io</code> and prefix <code>tr</code> for custom functions.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>XPath</title>
        <itemizedlist>
          <listitem>
            <para>Some XPath expressions force the XML parser to perform deep explorations of the XML tree. If you know
              the expected context, you can reduce CPU and memory usage by avoiding wildcard patterns (<code>*</code>,
                <code>@*</code>) and deep XPath axis requests (<code>ancestor</code>, <code>descendant</code> or
                <code>//*</code>, <code>preceding</code>, <code>following</code>).</para>
          </listitem>
          <listitem>
            <para>If possible, substitute regular expression functions (<code>matches()</code>, <code>replace()</code>, <code>tokenize()</code>)
              with simple string manipulation functions (<code>contains()</code>,
                <code>starts-with()</code>, <code>ends-with()</code>, <code>substring-before()</code>,
                <code>substring-after()</code>, <code>translate()</code></para>
          </listitem>
          <listitem>
            <para>Indent longer conditional statements, loops and nested functions</para>
            <programlisting><code role="language-markup">&lt;xsl:value-of select="if(foo)
                      then foo
                      else if (bar)
                           then bar 
                           else false()"/></code></programlisting>
          </listitem>
          <listitem>
            <para>Comment longer XPath statements: <code>(: my XPath comment :)</code></para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>RelaxNG/XSD</title>
        <para>Use <link xlink:href="http://www.xfront.com/GlobalVersusLocal.html#SecondDesign">Salami Slice
            Design</link> pattern for writing Schemas</para>
      </section>
      <section>
        <title>DTD</title>
        <para>Yo mama use a DTD for her CD catalog.</para>
      </section>
    </chapter>
  </part>
  <part>
    <title>Tutorials</title>
    <chapter xml:base="../tutorial.html" xml:id="tutorial-docx-jats-epub">
      <title>Tutorials</title>
      <subtitle>docx→JATS→EPUB</subtitle>
      <para>By following this tutorial you will be able to set up a transpect conversion project. You will encounter
      the main concepts:</para>
      <itemizedlist>
        <listitem>
          <para>transpect is a configuration management system for XProc/XSLT/validation pipelines with a focus on
          publishing workflows.</para>
        </listitem>
        <listitem>
          <para>transpect provides modules for conversion between XML-based formats such as docx and EPUB, and between
          XML vocabularies.</para>
          </listitem>
        <listitem>
          <para>The Schematron/RelaxNG/custom validation results will be consolidated into an HTML rendering of
          the input.</para>
        </listitem>
        <listitem>
          <para>transpect projects typically reside in revision control repositories, attaching the necessary modules
          and even the runtime (Calabash XProc processor) as svn externals or git submodules</para>
        </listitem>
      </itemizedlist>
      <para>Prerequisites: Intermediate knowledge of revision control systems, XProc, and XSLT.</para>
      <para>transpect offers some ready-to-run pipelines such as <link xlink:href="https://github.com/transpect/docx2tex">docx2tex</link>
        or <link xlink:href="https://transpect.le-tex.de/en/converter/save_file?set_button=&amp;upload_type=epubcheck">epubcheck-transpect</link>, 
        but most projects require configuration. transpect is not a tool, it’s a framework that has
        its own modules and methodologies. Someone needs to configure them, operate them, and to make sure that
        once-configured pipelines continue to yield consistent results.</para>
      <para>This tutorial focuses on the configuration part.</para>
      
      <section xml:id="initial-github-repo">
        <title>Creating a Repository</title>
        <para>A transpect project consists of a specification which modules to use (and in which revision), project-specific
          adaptations, and the modules. The project itself resides in a version control repository (we are using Git and Subversion (SVN),
          others will probably work, too). There are at least three ways of setting up a transpect project:</para>
        <itemizedlist>
          <listitem>
            <para>Git project with Git submodules</para>
          </listitem>
          <listitem>
            <para>SVN project with SVN externals (GitHub provides sufficient SVN support to make this feasible, even if
              the modules reside in Git repositories)</para>
          </listitem>
          <listitem>
            <para>Git, SVN (or probably also Mercurial) project with the modules as Git or SVN externals, using 
              <link xlink:href="http://nopugs.com/ext-tutorial">ext</link></para>
          </listitem>
        </itemizedlist>
        <para>We will focus on the first approach, although git submodules are quite a beast. For people who don’t use
        SVN on a regular basis it’s the best choice though.</para>
        <para>Let’s start creating a repository on GitHub. We call it <link 
          xlink:href="https://github.com/transpect/docx2jats-demo">docx2jats-demo</link> and clone its <link 
            xlink:href="https://github.com/transpect/docx2jats-demo/tree/99ce82f2a007e8c948a9663d8325c73bcc05664a">initial
          commit 99ce82f</link> to local:</para>
        <programlisting>git clone https://github.com/transpect/docx2jats-demo.git --recursive</programlisting>
        <note>
          <para>You wouldn’t need <parameter>--recursive</parameter> on your first checkout, but for those who intend
        to clone the final project this is helpful already.</para>
        </note>
      </section>
      
      <section xml:id="submodules">
        <title>Adding Submodules</title>
        <para>We’ll identify the modules that we need (primarily by their name, such as <link 
          xlink:href="https://github.com/transpect/docx2hub">docx2hub</link>, <link 
            xlink:href="https://github.com/transpect/hub2jats">hub2jats</link>, <link 
              xlink:href="https://github.com/transpect/jats2html">jats2html</link>
          or <link xlink:href="https://github.com/transpect/epubtools">epubtools</link>).
        One of the submodules is the XProc processor. In principle, we could rely on an already-installed XML Calabash.
        However, we need some Calabash extensions, a more recent Saxon version than is bundled with Calabash, and compatibility
        assurance. Therefore, we created our own Calabash distribution, usually based on the most recent release, and we add 
        this as a submodule to every project.</para>
        <programlisting>git submodule add https://github.com/transpect/calabash-frontend.git calabash</programlisting>
        <para>The <literal>calabash-frontend</literal> is special in that it includes other submodules. These won’t be checked
          out by default. Therefore you should initialize them recursively:</para>
        <programlisting>git submodule update --init --recursive</programlisting>
        <para>(You can postpone this statement until you have specified all submodules.)</para>
        <note>
          <title>Optional: Using Subversion</title>
          <para>If you are using SVN externals, you’ll have to specify five externals:</para>
          <programlisting>https://github.com/transpect/calabash-frontend/trunk@38 calabash
https://github.com/transpect/calabash-distro/trunk@9 calabash/distro
https://github.com/transpect/rng-extension/trunk@10 calabash/extensions/transpect/rng-extension
https://github.com/transpect/unzip-extension/trunk@2 calabash/extensions/transpect/unzip-extension
https://github.com/transpect/image-props-extension/trunk@4 calabash/extensions/transpect/image-props-extension</programlisting>
          <para>Note that it is recommended to attach SVN externals with a fixed revision number, at least in production.
          Git submodules are fixed to a certain commit by default.</para>
        </note>
        <para>Let’s continue checking out some externals. We are probably going to validate the intermediate <link 
          xlink:href="https://github.com/le-tex/Hub">Hub XML</link> in our docx→Hub→JATS→EPUB pipeline. This RNG schema includes
        the <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link> schema as a submodule.</para>
        <programlisting>git submodule add https://github.com/le-tex/Hub.git schema/hub
git submodule update --init --recursive</programlisting>
        <note>
          <title>Optional: Using Subversion</title>
          <para>In an SVN project, you’d add two externals for this:</para>
          <programlisting>https://github.com/le-tex/Hub/trunk schema/Hub
https://github.com/le-tex/CSSa/trunk schema/Hub/css</programlisting>
          <para>Since it is not relevant for production and since newer releases of the schemas should be backward compatible,
        it is relatively safe to omit the fixed revision here.</para>
        </note>
        <programlisting>git submodule add https://github.com/transpect/schema-jats schema/jats
git submodule add https://github.com/transpect/schema-html schema/html
git submodule add https://github.com/transpect/docx2hub
git submodule add https://github.com/transpect/evolve-hub.git
git submodule add https://github.com/transpect/hub2html.git
git submodule add https://github.com/transpect/hub2bits.git hub2jats
git submodule add https://github.com/transpect/jats2html.git
git submodule add https://github.com/transpect/cascade.git
git submodule add https://github.com/transpect/htmlreports.git
git submodule add https://github.com/transpect/schematron.git
git submodule add https://github.com/transpect/epubtools.git
git submodule add https://github.com/transpect/epubcheck-idpf.git
git submodule add https://github.com/transpect/xslt-util.git
git submodule add https://github.com/transpect/xproc-util.git
</programlisting>
        <para>You’ll find individual descriptions of the modules in the <link 
          xlink:href="http://transpect.github.io/modules-bits2hub.html">Modules section</link>.</para>
        <para>Some of the modules you’ll need in almost every transpect project, some are vocabulary-specific (the ones
        that contain “jats” or “bits”) or input/output format specific (the ones that contain “docx”, “idml”, or “epub”).</para>
        <para>Commit the changes and push it to the upstream repository:</para>
        <programlisting>git commit -m "add submodules"
git push</programlisting>
        <para>This is the repository after commit <link xlink:href="https://github.com/transpect/docx2jats-demo/tree/2445f084fae5635bb1f32f3e47e33275d73a34d9">2445f08</link>.</para>

        <note>
          <title>If you want to commit to the submodules later</title>
          <para>If you have commit permissions to <link xlink:href="https://github.com/transpect/">transpect.io on github</link>
          or if you have attached Git submodules from your own repositories, be aware that everything that you change to 
          the checked out submodules will probably be lost, due to the unwieldy nature of Git submodules (<link 
            xlink:href="https://duckduckgo.com/?q=git+submodule+detached+head&amp;ia=qa">“git submodules detached head”</link>).
          If you want to edit them, do a</para>
          <programlisting>git submodule foreach git pull origin master</programlisting>
          <para>on the top level directory of the transpect project. Then you can individually add, commit, and push
          changes to the submodules <emphasis>from their own directories</emphasis>, until you finally add, commit, and push
          the new commits from the top-level directory.</para>
        </note>
      </section>

      <section xml:id="xmlcatalog">
        <title>XML Catalog</title>
        <para>Each transpect module is known by a canonical URI (example: <literal>http:transpect.io/docx2hub/</literal>) 
          that may be used for importing their XSLT, XProc, images, or even for referring to fonts in CSS files. The
        mapping to actual files will be performed by a catalog resolver that needs to be configured by an XML Catalog. 
        The Calabash frontend script, 
          <link xlink:href="https://github.com/transpect/calabash-frontend/blob/master/calabash.bat">calabash.sh</link> or 
          <link xlink:href="https://github.com/transpect/calabash-frontend/blob/master/calabash.bat">calabash.bat</link>, will 
        read a catalog <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/eabd9b6201e236af1042f0c60eb3b9bf97444169/xmlcatalog/catalog.xml"><literal>../xmlcatalog/catalog.xml</literal></link> by default. The catalog that you are going to create 
        will contain mostly <literal>nextCatalog</literal> that refer to the modules’ XML catalogs, at their relative locations
        in your project. In addition, you declare 
          <markup>&lt;rewriteURI uriStartString=​"http://this.transpect.io/" rewritePrefix="../"/&gt;</markup> to point to
        your project’s base directory. This is necessary for the configuration cascade that we’ll encounter later. By convention,
        all project-specific adaptations reside below <literal>http://this.transpect.io/a9s/</literal>.</para>
        <programlisting>mkdir xmlcatalog
 # (edit xmlcatalog/catalog.xml)
 git add xmlcatalog</programlisting>
        <para>We’ll get back to the last instruction in the catalog later 
          (<markup>&lt;nextCatalog catalog="content-repo.catalog.xml"/&gt;</markup>).</para>
        <para>If you are an <link xlink:href="https://www.oxygenxml.com/">oXygen</link> user, now is a good time to create
        a <literal>.xpr</literal> (oXygen project) file. In this file, you tell oXygen to use 
          <literal>${pdu}/calabash/xmlcatalog/catalog.xml</literal> as XML catalog.</para>
        <informalfigure>
          <mediaobject>
            <alt>oXygen XML catalog configuration</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/catalog-xpr.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>This will make oXygen use your project’s catalog by means of a <literal>nextCatalog</literal> instruction, in 
          the same way as Calabash uses your catalog. This will be helpful later because oXygen will be able to follow the
        canonical URIs.</para>
        <para>While you are at it, you should “Enable Master Files Support” for this oXygen project and add 
          <literal>docx2hub/xsl/main.xsl</literal> and <literal>evolve-hub/xsl/evolve-hub.xsl</literal>. We may need to
          add more files as we go. They are needed by oXygen in order to resolve variable/function/key/template declarations
          from other files than the currently edited or its imports. By doing so, you’ll benefit from oXygen’s XSLT checking
        capabilities that go far beyond syntax checks.</para>
        <programlisting>git add docx2jats-demo.xpr
git commit -m "add XML catalog, oXygen project"
git push</programlisting>
        <para>You may try the correct catalog resolution and oXygen configuration by Ctrl-clicking on 
          <literal>http://this.transpect.io/</literal> in the catalog. It should open the project’s base directory.</para>
        <para>With an update to a submodule that happened in the meantime, the repo at this stage looks like this: <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/tree/eabd9b6201e236af1042f0c60eb3b9bf97444169">eabd9b6</link></para>
      </section>
      
      <section xml:id="getting-input">
        <title>Getting Sample Input</title>
        <para>Our friends at <link xlink:href="http://www.ulsp.eu/">University of Leipzig Sports Medicine</link> produce and
          publish an open access journal from Word files. Their desire to upload the articles to <link 
            xlink:href="http://www.ncbi.nlm.nih.gov/pmc/">PMC</link> made them ask us to provide a converter. Because our test
        system relies on SVN front-end repos, we were unable to use it as a GitHub-based demo project. But we can use their
        content. You can check it out from our <link 
          xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/ulsp/">SVN server</link>:</para>
        <programlisting>mkdir ../content
svn co https://subversion.le-tex.de/common/transpect-demo/content/ulsp/ ../content/ulsp</programlisting>
        <para>or, for the time being, you can just save one of the 
          <link xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/ulsp/CSMI/CSMI_2014_701/docx/CSMI_2014_701.docx"><literal>.docx</literal></link> 
          files anywhere you want. Please be aware though
        that steps that we’ll introduce later (zipping the output and the images for PMC, …) rely on the 
          <literal>.docx</literal> files residing in a <literal>docx/</literal> directory. Also, for making use of the configuration
          cascade that lets you – in principle – override settings per article, the content has to be stored according to a certain 
          directory structure.</para>
      </section>
      
      <section xml:id="basic-pipeline">
        <title>A First Pipeline</title>
        <para>By convention, the pipelines that are meant to be invoked directly (as opposed to pipelines that implement 
          the innards of a macroscopic step such as the ominous <literal>evolve-hub</literal>) reside in the directory 
          <literal>a9s/common/xpl</literal>. This is absolutely not necessary; they may reside anywhere within the project.</para>
        <para>Let’s create <literal>a9s/common/xpl/docx2jats.xpl</literal> and insert a basic pipeline: docx → flat Hub XML → JATS</para>
        <para>The commit is <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/tree/0e289b58a2978f334c2ced62f557627b1e7e9172">0e289b5</link>, 
        and the <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/0e289b58a2978f334c2ced62f557627b1e7e9172/a9s/common/xpl/docx2jats.xpl">pipeline 
          looks like this</link>. You’ll notice the <literal>p:import</literal> by canonical URI statements and the three essential
        steps, <literal>docx2hub:convert</literal>, <literal>hub:evolve-hub</literal>, and <literal>jats:hub2bits</literal> 
          (the odd naming is because the step will produce <link xlink:href="http://jats.nlm.nih.gov/extensions/bits/">BITS</link> 
          books instead of JATS articles if fed with a <literal>/dbk:book</literal> document).</para>
        <para>Invoke the transformation with the following statement on the command line (swapping <literal>.sh</literal>
        with <literal>.bat</literal> and probably also <literal>/</literal> with <literal>\</literal> on Windows machines 
        without <link xlink:href="https://cygwin.com/">Cygwin</link>):</para>
        
        <programlisting>calabash/calabash.sh a9s/common/xpl/docx2jats.xpl file=../content/ulsp/CSMI/CSMI_2014_701/docx/CSMI_2014_701.docx</programlisting>
        
        <para>You will see some <link xlink:href="source/media//docx2jats-demo/output-CSMI_2014_701-from_flat.xml">garbage</link>
          that faintly resembles JATS, but with all kinds of <literal>css:</literal> attributes
        and a <literal>dark-matter</literal> element instead of <literal>body</literal> or <literal>back</literal>. This
        is because the converter needs to know how to interpret the paragraph and character style names in the Word file.
        The main part of this transformation is done in <literal>evolve-hub</literal> that is a library for nesting list
          items according to indentation, hierarchizing sections whose names match ceertain regexes, grouping figures and
          tables with their captions, etc. <literal>evolve-hub</literal> is a toolbox (or a beast, according to other people)
        from which to configure multi-pass XSLT pipelines that up-convert 
          <link xlink:href="https://github.com/le-tex/Hub">Hub XML</link>, the flat DocBook derivative, to a more reasonable
        DocBook that may then be converted “sideways,” with significantly less XSLT passes, into JATS, for example. The 
          <literal>evolve-hub</literal> configuration that was applied to the input was a succession of XSLT modes defined
        in <link xlink:href="https://github.com/transpect/evolve-hub/blob/master/xpl/fallback.xpl#L210">fallback.xpl</link>,
        using default parameters/variables/templates/functions in XSLT.</para>
      </section>
      
      <section xml:id="dynamic-transformation-pipelines">
        <title>Dynamic Transformation Pipelines</title>
        <note>
          <para>You can skip this and the following two sections if you aren’t interested (yet) in the gory configuration 
          details, content repositories, or debugging. You may jump directly to <xref linkend="a9s-common"/>.</para>
        </note>
        <para>All the major steps that transform documents from one XML format to another XML format are implemented using the
          XProc step <link xlink:href="https://github.com/transpect/cascade/blob/master/xpl/dynamic-transformation-pipeline.xpl"
              ><literal>tr:dynamic-transformation-pipeline</literal></link>.</para>
        <para>It works like this:</para>
        <orderedlist>
          <listitem>
            <para>Consider the <literal>load</literal> option given to the step (for ex. <literal>evolve-hub/driver</literal>)</para>
          </listitem>
          <listitem>
            <para>In the configuration cascade, look for the most specific file with the name <literal>evolve-hub/driver.xpl</literal>. 
            This pipeline (or a fallback pipeline, if specified) will then be dynamically executed, using Calabash’s 
              <literal>cx:eval</literal> extension step.</para>
          </listitem>
          <listitem>
            <para>In the configuration cascade, look for the most specific file with the name <literal>evolve-hub/driver.xsl</literal>.
            This will be supplied to the pipeline on its stylesheet port. Typically a more specific stylesheet (for a journal) 
            will import a stylesheet from a less specific location (for an imprint).</para>
          </listitem>
        </orderedlist>
        <para>Apart from the primary input (<literal>source</literal> port) and the stylesheet, the dynamically loaded pipeline
        may get its options in a <literal>cx:options</literal> document and additional inputs on an <literal>additional-inputs</literal>
        port with <literal>sequence="true"</literal>. It will typically contain a sequence of XSLT passes, where each pass will transform
        its input in a given XSLT mode, using the same stylesheet. It may apply arbitrary XProc steps, though.</para>
        <para>XSLT has a nice import mechanism; in XProc, import is a different thing. There is no “inherit&amp;tweak” 
        mechanism for pipelines. Therefore, in order to avoid the redundancy of writing lots of fairly similar multi-XSLT-pass 
        pipelines, <literal>tr:dynamic-transformation-pipeline</literal> (or rather, <link 
          xlink:href="https://github.com/transpect/cascade/blob/master/xpl/load-cascaded.xpl"><literal>tr:load-cascaded</literal></link>)
        supports dynamic generation of the resource in question. So in the example above, if the dynamic loader is looking for
        <literal>evolve-hub/driver.xpl</literal> at a certain location and doesn’t find it there, it will also use an XSLT pipeline 
          <literal>evolve-hub/driver.xpl.xsl</literal> at that location, before it skips the location altogether and searches
        less specific locations. It will invoke, by convention, the <literal>main</literal> template of 
          <literal>evolve-hub/driver.xpl.xsl</literal>. This main template typically loads the pipeline 
          <literal>evolve-hub/driver.xpl</literal> from a less specific location (or from a sister journal) and transforms
          it, typically adding or removing XSLT steps in certain modes.</para>
      </section>
      
      <section xml:id="cascade">
        <title>Configuration Cascade</title>
        <para>The configuration relies on the following assumptions:</para>
        <itemizedlist>
          <listitem>
            <para>Each content item belongs to a certain place 
        in a content hierarchy (a certain imprint, a certain book series, …).</para>
          </listitem>
          <listitem>
            <para>It is possible to address this location by name/value pairs</para>
          </listitem>
          <listitem>
            <para>The name/value pairs, if not given explicitly, may be parsed from the file name.</para>
            <informalfigure>
          <mediaobject>
            <alt>Location lookup from name/value pairs</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/filename2directory.svg"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
          </listitem>
          <listitem>
            <para>All content items within a subtree inherit the same configuration settings (CSS, XSLT, Schematron, …)
            and may overwrite them for their subtree.</para>
          </listitem>
        </itemizedlist>
        <para>These non-overlapping classification hierarchies are called <emphasis><link 
          xlink:href="https://en.wikipedia.org/wiki/Clade">clades</link></emphasis>.</para>
        <informalfigure>
          <mediaobject>
            <alt>Schematic clade diagram (from Wikipedia)</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/wikipedia_Clade-grade_II.svg"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>In a transpect project, the configuration overrides for the clades are stored in the <literal>a9s</literal> 
          (adaptations) directory.</para>
        <para>The underlying concept is described in greater detail in <link 
          xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/le-tex/setup-manual/en/out/xhtml/transpect-setup.xhtml#sec-cascade">another 
          piece of documentation</link> that will eventually be integrated into this site.</para>
        
        
        <para>It is also possible to have clades for each input type, e.g., <literal>.docx</literal> and <literal>.idml</literal>. 
          However, this approach is problematic as dicussed briefly at the end of 
          <link xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/le-tex/setup-manual/en/out/xhtml/transpect-setup.xhtml#sec-cascade-clade-selection">this section</link>.</para>
        <para>There are two ways to determine which clade a given input file belongs to:</para>
        <itemizedlist>
          <listitem>
            <para>by file name parsing (example: <literal>CSMI_2014_701.docx → publisher=ulsp, journal=CSMI, ms=CSMI_2014_701, ext=docx</literal>)</para>
            <para>(Note that <literal>publisher=ulsp</literal> doesn’t come from nowhere; this name/value pair either needs to be returned
            statically the same for every content by the parser, or it needs to be looked up by the parser in a journal/publisher list.)</para>
          </listitem>
          <listitem>
            <para>by explicitly setting it as an option to the pipeline (example: <literal>clades="publisher=ulsp journal=CSMI"</literal>,
              where ext may still be parsed from the file name). You may use <link 
                xlink:href="https://github.com/transpect/cascade/blob/master/xsl/paths.xsl#L365"><literal>[,/\s]</literal></link> 
              as a sepator</para>
          </listitem>
        </itemizedlist>
        
        <bridgehead>transpect Configuration File (clades file)</bridgehead>
        
        <para>At this point, it might be helpful to define “configuration”. It bears dual meaning: In a broad sense, 
          it’s the entirety of customizations, be it XSLT, CSS, fonts, dynamically loaded Proc pipelines, Schematron rules, …
        In a narrow sense, it is the single configuration file (the <emphasis>transpect configuration file</emphasis>) that 
          declares which clades are available and by which name/value pairs they are selected.</para>
        <para>The current project’s <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/conf/transpect-conf.xml">transpect configuration 
          file</link> contains three clades: one for the publisher,
            <literal>ulsp</literal>, and two for the journals <literal>CSMI</literal> and <literal>Test</literal>.</para>
        <para>The ultimate goal of clade selection is to compute file system paths in descending specificity where to look for
          the broad-sense configuration files. The file system paths will be contained in a <link 
            xlink:href="https://gist.github.com/gimsieke/3f866dc10d613665c83f"><literal>c:param-set</literal></link>
          document that is the result of invoking <link
            xlink:href="https://github.com/transpect/cascade/blob/master/xpl/paths.xpl"><literal>paths.xpl</literal></link> with
          a <literal>file</literal> option and optionally a <literal>clades</literal> option, where the name/value pairs in
            <literal>clades</literal> will have precedence. Technically the name/value pairs are modeled as attributes (not
          bound to any element).</para>
        <para>There is a <link xlink:href="https://github.com/transpect/cascade/blob/master/schema/cascade.rng">Relax NG 
          schema</link> for the transpect configuration file. <link 
            xlink:href="https://github.com/transpect/cascade/blob/master/schema/cascade.rng#L76">Schematron rules</link> in this schema support
        you in avoiding ambiguous clades that match the same combination of name/value pairs.</para>

        <bridgehead>Per-clade parameters</bridgehead>
        
        <para>You can insert <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/conf/transpect-conf.xml#L24">arbitrary name/value 
          pairs</link> in the clades. These will be included in the generated paths
          document for a content item that belongs to the clade. By using these parameters, you can for example specify
        that for a given clade, EPUB2 files should be generated instead of the global EPUB3 setting.
        This won’t happen automagically though. A pipeline step has to read the parameter from the paths document and
        alter the value in the EPUB configuration document template.</para>
<!-- tbd: epub3/epub2 for CSMI/Test -->
        
        <bridgehead>Custom File Name Parser</bridgehead>
        
        <para>Matching a clade according to the parsed or supplied name/value pairs is one thing. If you don’t supply the 
          <literal>clades</literal> option, it is necessary nonetheless to parse the input file name in order to get the 
          name/value pairs in first place. Parsing the file name typically involves <literal>xsl:analyze-string</literal>
        and creating attributes from the results. There is a <link 
          xlink:href="https://github.com/transpect/cascade/blob/master/xsl/paths.xsl">default parser</link> that will be 
          imported by a project-specific parser that <link 
            xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/a9s/common/xsl/paths.xsl#L7">overrides its 
            <literal>tr:parse-file-name()</literal></link> 
          function. Supplying this overriding parser is an essential customizing task. The location of this
        custom <literal>paths.xsl</literal> is given in the <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/conf/transpect-conf.xml#L6"><literal>/tr:conf/@paths-xsl-uri</literal></link>
        of the transpect configuration file.</para>
        <para>It is instructive to have a look at the <link xlink:href="https://github.com/transpect/docx2jats-demo/commit/e5e4e45eb4dad4a1acc48baf1f338c16e1ed17f4">changes 
          of commit e5e4e45</link> and also at the <link xlink:href="https://gist.github.com/gimsieke/3f866dc10d613665c83f/4c2b87e1769aa26bf2dc2dc533fd32b6169ae357">resulting 
            paths document</link>.</para>
        <para>Have a look at the <literal>c:param</literal>s that start with “s9y…” (for “specificity”).
            <literal>s9y1-path</literal> is the path to the most specific confiuration location. There are 9 levels of
          specificity available at the moment, that means 7 levels of nested clades, plus the path for the common configuration,
          plus the content location for per-work specific overrides.</para>
        <para>If no clade matches, there will only be two search paths in the paths document: the directory where the input file
          resides in and the common path. </para>
        <note>
          <title>Clades are complex. Should I use them for simple pipelines?</title>
          <para>If the project doesn’t rely on cascaded configuration, most macroscopic steps such as
              <literal>evolve-hub</literal> support custom, static URIs for <literal>fallback-xsl</literal> and
              <literal>fallback-xpl</literal>, and they also provide useful default values for these options. So in principle,
            instead of the cascaded loading, we can supply the pipeline of <link
              xlink:href="https://github.com/transpect/docx2jats-demo/blob/0e289b58a2978f334c2ced62f557627b1e7e9172/a9s/common/xpl/docx2jats.xpl"
              >commit 0e289b5</link> with more appropriate XSLT and inner XProc pipelines and be done with it. However,
            especially book production teaches us that there will always be exceptions. The way we dealt with exceptions before
            transpect was either to produce non-standard titles outside of the standard workflow or to add case switches to the
            conversion code that will ultimately render a monolithic converter unmaintainable.</para>
        </note>
        <para>
          <bridgehead>Content Repository</bridgehead>
        </para>
        <para>You might have noticed that in the paths document that <link
            xlink:href="https://gist.github.com/gimsieke/3f866dc10d613665c83f#file-paths-xml-L22"
              ><literal>repo-href-local</literal></link> and also <literal>s9y1-path</literal> point to HTTP URLs, although they
          should be pointing to local paths. This is the canonical content repo location URI that will be resolved by the
          catalog resolver. We didn’t supply a local <literal>rewriteURI</literal> resolution for this yet. Because the content
          files’ location on a local drive may be different for each user, it is not advisable to provide a fixed catalog for
          all of them in the revision control repository. Although there is a <literal>&lt;nextCatalog
            catalog="content-repo.catalog.xml"/&gt;</literal> provision already in the XML catalog for this resolution, you
          should only provide an unversioned file for each installation of this project.</para>
        <para>However, a common location for the (local copy of the) content repository is next to the project’s code directory.
          We typically cover this common case by placing another <literal>&lt;nextCatalog</literal> instruction below the
          first (see <link xlink:href="https://github.com/transpect/docx2jats-demo/compare/e5e4e45...37a9086">diff</link> of
        the catalogs). The paths that are supposed to be local 
          <link xlink:href="https://gist.github.com/gimsieke/3f866dc10d613665c83f/revisions">become local</link> in the paths document.</para>
        <para>By providing a <literal>content-repo.catalog.xml</literal> that has higher <literal>nextCatalog</literal> precedence 
        than <literal>content-repo.default.catalog.xml</literal>, you can still divert content repo lookups to other locations.</para>
        <para>As mentioned before, local resolution of the content repo will not only be used for per-content-item configuration
        overrides, but also for locating images. When Word InDesign link to external files, we often strip their paths and later
        replace them with <literal>concat($s9y1-path, 'images/', @fileref)</literal>.</para>
<!--     §§§tbd   <para>Examples for content-base-uri=".."</para>-->
      </section>
      
      <section xml:id="debugging">
        <title>Debugging</title>
        <para>You might have wondered where we read the <link xlink:href="https://gist.github.com/gimsieke/3f866dc10d613665c83f">paths 
          document</link> in the previous section, as the pipeline has no output port
        for it. We read it from the file <literal>debug/cascade/paths.xml</literal>. The location of the debugging files
        and whether they will be written at all (they can easily comprise dozens of Megabytes for IDML conversions)
        can be controlled as follows:</para>
        <para>Almost every transpect step supports two options, <literal>debug</literal> and <literal>debug-dir-uri</literal>.
          A transpect pipeline run might consist of dozens of steps (primarily XSLT passes) and these transformations are hard
          to debug if they are a black box. We never really figured out how to use <literal>p:log</literal>, so we wrote our own
            <link xlink:href="https://github.com/transpect/xproc-util/blob/master/store-debug/xpl/store-debug.xpl"
            >tr:store-debug</link> step. <literal>debug</literal> expects the somewhat XSLT-ish <literal>yes|no</literal>
          option, while debug-dir-uri expects a <literal>file:</literal> URL (note that catalog resolution will not apply to
          this URL). For the <literal>docx2jats.xpl</literal> pipeline, <literal>debug</literal> is set to
            <literal>yes</literal> by default, but debug-dir-uri is set to <literal>debug</literal>, which leads to the
          debugging output being written to <literal>xproc-util/store-debug/xpl/debug</literal>. If you want to store it below
          the project directory, you can do so by modifying the invocation to:</para>
        <!-- tbd: link to more debugging output -->
        <programlisting>calabash/calabash.sh -o result=out.xml a9s/common/xpl/docx2jats.xpl \
  file=../content/ulsp/CSMI/CSMI_2014_701/docx/CSMI_2014_701.docx \
  debug-dir-uri=file:$(pwd)/debug</programlisting>
        <para>for Linux or <literal>debug-dir-uri=file:/$(cygpath -ma debug)</literal> for Cygwin.</para>
        <para>The resulting tree looks like this. There are debug subdirectories for almost every step.</para>
        <informalfigure>
          <mediaobject>
            <alt>debug directories</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/debug-paths.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </section>
      
      <section xml:id="a9s-common">
        <title>Improving the Output by Adding Actual Configuration</title>
        <!-- tbd: link to output -->
        <para>In order to make the <link xlink:href="source/media/docx2jats-demo/output-CSMI_2014_701-with-config.xml">output</link> 
          more valid and reasonable, we now add configuration for the <literal>evolve-hub</literal>
        and <literal>hub2jats</literal> steps. (As a side note: <literal>docx2hub</literal> is a virtually configuration-free step that
          is supposed to yield the same flat Hub XML output for a given <literal>.docx</literal> file.)</para>
        <para>The differences in code can be seen <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/34147aceaaeeb3f014ecfdd39c953d0f5d34cfa9">here (commit 34147ac)</link>.
        Admittedly, finding the right places to tweak the <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/a9s/common/evolve-hub/driver.xsl#L14">imported XSLT</link> may
        be hard, but that’s a thing that this sample project should help alleviate.</para>
      </section>
      
      <section xml:id="validation">
        <title>Validation</title>
        <para>This <link xlink:href="https://github.com/transpect/docx2jats-demo/compare/34147ac...e5ef56c">diff of commit e5ef56c</link> 
        show several modifications to the <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/fbd645bc9f1c4f204fd248b361cc600adabe0413#diff-70cf31a3c86a739a35ebbf3fe22ec844">current pipeline</link>:</para>
        <itemizedlist>
          <listitem>
            <para>Added a <literal>jats2html</literal> step, <link 
              xlink:href="https://github.com/transpect/docx2jats-demo/blob/e5ef56c8f9b15b466047b813f66940a63550cdbf/a9s/common/jats2html/jats2html.xsl">XSLT customizing</link>
            for this step, and CSS </para>
          </listitem>
          <listitem>
            <para>Added Schematron checks for flat Hub, for evolved Hub, and for JATS XML</para>
          </listitem>
          <listitem>
            <para>Added a Relax NG check for JATS XML, using the JATS 1.0 archiving schema (using a <link 
              xlink:href="https://github.com/transpect/rng-extension/blob/master/xpl/validate-with-rng-declaration.xpl">wrapper</link> around
            <literal>p:validate-with-relax-ng</literal> that produces an output port and reports the XPath
            location for each error, in addition to the line number which is meaningless in the middle of a pipeline)</para>
          </listitem>
          <listitem>
            <para>Added a <literal>tr:check-styles</literal> step that matches the styles found in the input <literal>.docx</literal>
              against <link xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/a9s/common/styles/cssa.xml">this list</link>
            (that has been extracted from the Hub XML of a sample input document)</para>
          </listitem>
          <listitem>
            <para><literal>tr:patch-svrl</literal>: Collect the 
              <literal>report</literal> ports of all steps (SVRL and <literal>c:errors</literal> documents produced by the
              RNG validation and potentially also by <literal>p:try</literal>/<literal>p:catch</literal>-encapsulated steps)
              and patch them into the HTML rendering, at the error location. There is an XML Amsterdam presentation entitled 
              <link xlink:href="http://publishinggeekly.com/wp-content/uploads/2015/11/2015-11-06_xmlamsterdam_htmlreports/"
                >“Unified Validation Reporting in HTML Renderings”</link> that describes this approach.
            </para>
          </listitem>
        </itemizedlist>
        <para>The modified invocation (modulo debug options) reads:</para>
        <programlisting>calabash/calabash.sh \
   -o result=out.xml \
   -o htmlreport=report.xhtml \
   a9s/common/xpl/docx2jats.xpl \
   file=../content/ulsp/CSMI/CSMI_2014_701/docx/CSMI_2014_701.docx</programlisting>
        <para>See the resulting <link xlink:href="source/media/docx2jats-demo/report-CSMI_2014_701.xhtml">error report</link>.</para>
        <bridgehead>Faulty Input</bridgehead>
        <para>Let’s convert a file, <link xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/ulsp/CSMI/CSMI_2014_701f/docx/CSMI_2014_701f.docx">CSMI_2014_701f.docx</link>,
          that contains some errors.</para>
        <para>After setting a <link xlink:href="https://github.com/transpect/docx2jats-demo/commit/f427b4024d1f6cd5099c0dd9a1a34b1bb036de1b#diff-1">configuration 
          parameter</link> that will regroup the SVRL messages according to <link 
            xlink:href="https://github.com/transpect/docx2jats-demo/blob/e5ef56c8f9b15b466047b813f66940a63550cdbf/a9s/common/schematron/flat/flat-hub.sch.xml#L47">category</link> instead of
          conversion step, where category is supplied by the Schematron author, the <link 
            xlink:href="source/media/docx2jats-demo/report-CSMI_2014_701.xhtml">HTML report</link> contains some more errors
          and warnings.</para>

      </section>

      <section xml:id="a9s-specific-customizations">
        <title>Using the Configuration Cascade</title>

        <para>So far, we did only supply customizations in the <literal>a9s/common</literal> directory. Let’s introduce
        a new ulsp journal, alongside the existing CSMI, and call it 'Test'. (Oh, we did actually introduce it already,
        in our <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/master/conf/transpect-conf.xml">configuration 
          file</link>.) Its configuration base directory is <literal>a9s/ulsp/Test</literal>.</para>
        
        <bridgehead>Mapping Style Names</bridgehead>

        <para>Sometimes you want to use localized or publisher-/journal-/typesetter-specific versions of your Word or InDesign
        templates. transpect features a batch-mode style mapper that will normalize the diverse names to a common standard.
        This will help you keep your XSLT and Schematron rules simple.</para>
        
        <para>Let’s assume that the Test journal uses different style names, like this:</para>
        <informalfigure>
          <mediaobject>
            <alt>Diff between the CSMI and Test docx2hub output</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/pre-stylemap-diff.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        
        <para>We introduce a file <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/7131f8ef042855066dbe29a3a2be943134554d1e#diff-3"><literal>a9s/ulsp/styles/map-docx.xhtml</literal></link>.
        It contains a 3-column HTML table where the second column contains a regex that is supposed to match existing
        style names and the first column contains the replacement. The replacements will be applied from top to bottom;
        subsequent rules will be applied to the output of the current replacement rule. This makes the mapping mechanism 
        really powerful.</para>
        
        <para>We add <link xlink:href="https://github.com/transpect/map-style-names">map-style-names</link> as a submodule, 
          refer to its XML catalog and <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/7131f8ef042855066dbe29a3a2be943134554d1e#diff-1">invoke 
          the step in the pipeline</link>, right after <literal>docx2hub</literal>. That way, we don’t have to adapt
        our style checking step or any other parts of the pipeline.</para>
        
        <para>Without the mapping, the HTML report will <link 
          xlink:href="source/media/docx2jats-demo/report-Test_2014_701-unmapped.xhtml">go berserk</link> because no valid JATS 
          could be produced, due to the unexpected style names.</para>
        
        <bridgehead>Extending the Schematron</bridgehead>
        <para>In order to make it a bit more interesting, we introduce <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/7131f8ef042855066dbe29a3a2be943134554d1e#diff-2">an 
          additional Schematron check</link> for <literal>a9s/ulsp/Test</literal>. The resulting report features an
        <link 
          xlink:href="source/media/docx2jats-demo/report-Test_2014_701.xhtml#BC_d6897e95_1">interesting new error</link>.</para>
        
        <para>The assembly mechanism for Schematron checks works cumulatively. For each given <emphasis>family</emphasis> 
          (<literal>jats</literal>, <literal>flat</literal>, <literal>evolve-hub</literal> in this project), it adds the checks 
          of the sub-clades to the ancestor clades’ checks. </para>
        <para>If a check should be left out in the derivative clade, its pattern should be redefined
        empty there.</para>
      </section>

      <section xml:id="epub">
        <title>Creating an EPUB</title>
        <para>transpect’s EPUB conversion step accepts a single (X)HTML document on its source port. In addition,
        it requires a configuration file in which you can specify the EPUB version (2 or 3 currently), the hierarchization 
        classes/epub:types for generating the nav document, parameters for existing checks (e.g., image file size, colorspace),
        additional Schematron for checks, the location of the cover image, and metadata.</para>
        <para>We’ll have to change the following things:</para>
        <itemizedlist>
          <listitem>
            <para>add an <literal>xml:base</literal> attribute to the HTML rendering that is a <literal>file:</literal> 
              URI that ends in <literal>.xhtml</literal>.
            In the example, it is the file URI of the <literal>docx2hub</literal> output, with a trailing <literal>.hub.xml</literal>
            replaced with <literal>.xhtml</literal></para>
          </listitem>
          <listitem>
            <para>add css-tools as submodule since we forgot to add it initially</para>
          </listitem>
          <listitem>
            <para>provide an epub configuration (we put it into <literal>a9s/common/epubtools/epub-config.xml</literal>,
            and <literal>tr:load-cascaded</literal> lets you load a different config files for other 
            clades or create a document from another one using the <literal>epub-config.xml.xsl</literal> mechanism).</para>
          </listitem>
        </itemizedlist>
        <para>These are the changes of the corresponding <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/commit/9e5e49bf0d17d7291e02225d30fb6763a0f19586">commit 9e5e49b</link>.</para>
        <para>This is the resulting <link xlink:href="source/media/docx2jats-demo/Test_2014_701.epub">EPUB file</link>, and
          this is the 
          <link xlink:href="source/media/docx2jats-demo/report-Test_2014_701-epubtools.xhtml">HTML report</link> that includes the standard IDPF epubcheck 4.0.1 checks. In addition, it would have also checked image color spaces
          and sizes by Schematron. But in this case the images happen to be TIFFs – we need to 
          <link xlink:href="https://github.com/transpect/image-transform-extension">convert them to supported formats</link> before.</para>
      </section>

      <section xml:id="pmc">
        <title>PubMed Central Submission</title>

        <bridgehead>PubMed Central / NLM style checker</bridgehead>
        <para>PMC provides <link xlink:href="http://www.ncbi.nlm.nih.gov/pmc/tools/stylechecker/">XSLT stylesheets</link> for letting you check JATS prior to submission. We wrapped this as an XProc step that 
        produces SVRL that may then be rendered into the <link 
          xlink:href="source/media/docx2jats-demo/report-CSMI_2014_701-nlm.xhtml">HTML report</link>.</para>

        <para>Here’s the corresponding <link xlink:href="https://github.com/transpect/docx2jats-demo/commit/0327abfebc013908de3879d408200163243ca2ad">commit 0327abf</link></para>

        <bridgehead>Creating a PMC Zip</bridgehead>
        <para>tbd; will be available by tonight…</para>

      </section>

      

      <section xml:id="transpectdoc">
        <title>transpectdoc</title>
        <para>The <link xlink:href="source/media/docx2jats-demo/doc/">generated documentation</link> of this project.</para>
      </section>

      <section xml:id="integration">
        <title>Integration/Tests</title>
        <para>tbd: Upload interface / Makefile</para>
        <para>tbd: before/after</para>
        <para>tbd: jenkins screenshot</para>
      </section>

      <section xml:id="gui">
        <title>GUI</title>
        <para>tbd: screenshots, installation of this project on <link 
          xlink:href="https://transpect.le-tex.de/?locale=en">transpect.le-tex.de</link></para>
      </section>
    </chapter>
  </part>
</book>
